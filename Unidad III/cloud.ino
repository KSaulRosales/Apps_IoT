// DHT sensor library for ESPx - Version: Latest
#include "DHTesp.h"
DHTesp dht;
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e26879f8-9488-4503-a741-b1f4c95edef0

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humedad;
  float temperatura;
  int contador;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//Constantes
const int ledPin = 12;  // Pin GPIO 27 para el LED
const int incrementButtonPin = 2; // GPIO 25 para el botón de incremento
const int decrementButtonPin = 4; // GPIO 26 para el botón de decremento

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  //Configurar pines
  // Configura los pines del LED y botones como entradas/salidas
  pinMode(ledPin, OUTPUT);
  pinMode(incrementButtonPin, INPUT_PULLDOWN);
  pinMode(decrementButtonPin, INPUT_PULLDOWN);
  
  dht.setup(26, DHTesp::DHT22); // Connect DHT sensor to GPIO 17

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
   // Enciende el LED al principio
  digitalWrite(ledPin, HIGH);

  //Inicializar el contador
  contador = 11;
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  delay(dht.getMinimumSamplingPeriod());
  
  dhtSensor();
  contadorSensor();
  ledSensor();
  
}


/*
  Since Temperatura is READ_WRITE variable, onTemperaturaChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperaturaChange()  {
  // Add your code here to act upon Temperatura change
}

/*
  Since Humedad is READ_WRITE variable, onHumedadChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumedadChange()  {
  // Add your code here to act upon Humedad change
}


/*
  Since Contador is READ_WRITE variable, onContadorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onContadorChange()  {
  // Add your code here to act upon Contador change
}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
}

void dhtSensor(){
  float humidity = dht.getHumidity();
  float temperature = dht.getTemperature();

  humedad = humidity;
  temperatura = temperature;
  
  Serial.println(humedad);
  Serial.println(temperatura);
}

void contadorSensor(){
  
   // Verifica si se presionó el botón de incremento
  if (digitalRead(incrementButtonPin) == HIGH) {
    contador = contador+1;
  }

  // Verifica si se presionó el botón de decremento
  if (digitalRead(decrementButtonPin) == HIGH) {
    contador = contador-1;
  }
}

void ledSensor(){
   // Actualiza el estado del LED en función de la respuesta del servidor
    if (led==true) {
    // Si status es true, enciende el LED
    digitalWrite(ledPin, HIGH);
  } else if (led == false) {
    // Si status es false, apaga el LED
    digitalWrite(ledPin, LOW);
  }
}